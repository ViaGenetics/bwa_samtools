#!/usr/bin/env python
# bwa_samtools 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import dxpy
import logging
import time


logger = logging.getLogger(__name__)
logger.addHandler(dxpy.DXLogHandler())
logger.propagate = False


try:
    from dx_applet_utilities import (
        common_job_operations as dx_utils,
        manage_command_execution as dx_exec,
        prepare_job_resources as dx_resources)
except ImportError:
    logger.error("Make sure to add the dx_applet_utilities to execDepends in dxapp.json!")
    sys.exit(1)


@dxpy.entry_point('main')
def main(reads_1, reference, reference_index, read_group_sample, loglevel,
    read_group_platform, read_group_platform_unit, read_group_library,
    reads_2=None, advanced_bwa_options, advanced_samtools_view_options=None,
    advanced_samtools_sort_options=None, advanced_samtools_markdups_options=None,
    advanced_samtools_flagstat_options=None):

    """This is a dx applet that runs on the DNAnexus platform.

    :param: `reads_1`:
    :param: `reference`:
    :param: `reference_index`:
    :param: `read_group_sample`:
    :param: `read_group_platform`:
    :param: `read_group_platform_unit`:
    :param: `read_group_library`:
    :param: `advanced_bwa_options`:
    :param: `loglevel`:
    :param: `reads_2`:
    :param: `advanced_samtools_view_options`:
    :param: `advanced_samtools_sort_options`:
    :param: `advanced_samtools_markdups_options`:
    :param: `advanced_samtools_flagstat_options`:
    :returns: This will return an dx object with output generated. This is
        actually taken care of by dxpy client libraries.
    """

    # Set up string variables that are not required

    if not advanced_bwa_options:
        advanced_bwa_options = ""

    if not advanced_samtools_view_options:
        advanced_samtools_view_options = ""

    if not advanced_samtools_sort_options:
        advanced_samtools_sort_options = ""

    if not advanced_samtools_markdups_options:
        advanced_samtools_markdups_options = ""

    if not advanced_samtools_flagstat_options:
        advanced_samtools_flagstat_options = ""

    if reads_2:
        if len(reads_1) != len(reads_2):
            logger.error("# of files for reads_1 and reads_2 does not match!")
            sys.exit(1)

    # Set up execution environment

    logger.setLevel(loglevel)
    cpus = dx_resources.number_of_cpus(1.0)
    max_ram = dx_resources.max_memory(0.85)
    logger.info("# of CPUs:{0}\nMax RAM:{1}".format(cpus, max_ram))

    temp_directories = [
        "genome/",
        "out/output_markdups_bams/",
        "out/output_cram_file_archive/",
        "out/download_quality_metrics/",
        "tmp/alignment/",
        "tmp/merged/",
        "tmp/sorted/",
        "tmp/markdup/"
    ]

    for temp_directory in temp_directories:
        create_dir = dx_exec.execute_command("mkdir -p {0}".format(
            temp_directory))
        dx_exec.check_execution_syscode(create_dir, "Created: {0}".format(
            temp_directory))
        chmod_dir = dx_exec.execute_command("chmod 777 -R {0}".format(
            temp_directory))
        dx_exec.check_execution_syscode(chmod_dir, "Modified: {0}".format(
            temp_directory))

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    reads_1 = [dxpy.DXFile(item) for item in reads_1]
    if reads_2 is not None:
        reads_2 = [dxpy.DXFile(item) for item in reads_2]
    reference = dxpy.DXFile(reference)
    reference_index = dxpy.DXFile(reference_index)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(reference.get_id(), "reference")

    dxpy.download_dxfile(reference_index.get_id(), "reference_index")
    for i, f in enumerate(reads_1):
        dxpy.download_dxfile(f.get_id(), "reads_1-" + str(i))
    if reads_2 is not None:
        for i, f in enumerate(reads_2):
            dxpy.download_dxfile(f.get_id(), "reads_2-" + str(i))

    # Fill in your application code here.

    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    download_quality_metrics = dxpy.upload_local_file("download_quality_metrics")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["output_markdups_bams"] = [dxpy.dxlink(item) for item in output_markdups_bams]
    output["output_cram_file_archive"] = [dxpy.dxlink(item) for item in output_cram_file_archive]
    output["download_quality_metrics"] = dxpy.dxlink(download_quality_metrics)

    return output

dxpy.run()
